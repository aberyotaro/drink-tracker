// Code generated by BobGen sqlite v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	models "github.com/aberyotaro/drink-tracker/models"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type DrinkTypeMod interface {
	Apply(context.Context, *DrinkTypeTemplate)
}

type DrinkTypeModFunc func(context.Context, *DrinkTypeTemplate)

func (f DrinkTypeModFunc) Apply(ctx context.Context, n *DrinkTypeTemplate) {
	f(ctx, n)
}

type DrinkTypeModSlice []DrinkTypeMod

func (mods DrinkTypeModSlice) Apply(ctx context.Context, n *DrinkTypeTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// DrinkTypeTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type DrinkTypeTemplate struct {
	ID                func() int32
	Name              func() string
	TypicalAmountML   func() int32
	AlcoholPercentage func() float32

	f *Factory
}

// Apply mods to the DrinkTypeTemplate
func (o *DrinkTypeTemplate) Apply(ctx context.Context, mods ...DrinkTypeMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.DrinkType
// according to the relationships in the template. Nothing is inserted into the db
func (t DrinkTypeTemplate) setModelRels(o *models.DrinkType) {}

// BuildSetter returns an *models.DrinkTypeSetter
// this does nothing with the relationship templates
func (o DrinkTypeTemplate) BuildSetter() *models.DrinkTypeSetter {
	m := &models.DrinkTypeSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = &val
	}
	if o.Name != nil {
		val := o.Name()
		m.Name = &val
	}
	if o.TypicalAmountML != nil {
		val := o.TypicalAmountML()
		m.TypicalAmountML = &val
	}
	if o.AlcoholPercentage != nil {
		val := o.AlcoholPercentage()
		m.AlcoholPercentage = &val
	}

	return m
}

// BuildManySetter returns an []*models.DrinkTypeSetter
// this does nothing with the relationship templates
func (o DrinkTypeTemplate) BuildManySetter(number int) []*models.DrinkTypeSetter {
	m := make([]*models.DrinkTypeSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.DrinkType
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use DrinkTypeTemplate.Create
func (o DrinkTypeTemplate) Build() *models.DrinkType {
	m := &models.DrinkType{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.TypicalAmountML != nil {
		m.TypicalAmountML = o.TypicalAmountML()
	}
	if o.AlcoholPercentage != nil {
		m.AlcoholPercentage = o.AlcoholPercentage()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.DrinkTypeSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use DrinkTypeTemplate.CreateMany
func (o DrinkTypeTemplate) BuildMany(number int) models.DrinkTypeSlice {
	m := make(models.DrinkTypeSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableDrinkType(m *models.DrinkTypeSetter) {
	if m.Name == nil {
		val := random_string(nil)
		m.Name = &val
	}
	if m.TypicalAmountML == nil {
		val := random_int32(nil)
		m.TypicalAmountML = &val
	}
	if m.AlcoholPercentage == nil {
		val := random_float32(nil)
		m.AlcoholPercentage = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.DrinkType
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *DrinkTypeTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.DrinkType) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a drinkType and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *DrinkTypeTemplate) Create(ctx context.Context, exec bob.Executor) (*models.DrinkType, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a drinkType and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *DrinkTypeTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.DrinkType {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a drinkType and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *DrinkTypeTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.DrinkType {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a drinkType and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *DrinkTypeTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.DrinkType, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableDrinkType(opt)

	m, err := models.DrinkTypes.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = drinkTypeCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple drinkTypes and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o DrinkTypeTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.DrinkTypeSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple drinkTypes and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o DrinkTypeTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.DrinkTypeSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple drinkTypes and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o DrinkTypeTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.DrinkTypeSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple drinkTypes and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o DrinkTypeTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.DrinkTypeSlice, error) {
	var err error
	m := make(models.DrinkTypeSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// DrinkType has methods that act as mods for the DrinkTypeTemplate
var DrinkTypeMods drinkTypeMods

type drinkTypeMods struct{}

func (m drinkTypeMods) RandomizeAllColumns(f *faker.Faker) DrinkTypeMod {
	return DrinkTypeModSlice{
		DrinkTypeMods.RandomID(f),
		DrinkTypeMods.RandomName(f),
		DrinkTypeMods.RandomTypicalAmountML(f),
		DrinkTypeMods.RandomAlcoholPercentage(f),
	}
}

// Set the model columns to this value
func (m drinkTypeMods) ID(val int32) DrinkTypeMod {
	return DrinkTypeModFunc(func(_ context.Context, o *DrinkTypeTemplate) {
		o.ID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m drinkTypeMods) IDFunc(f func() int32) DrinkTypeMod {
	return DrinkTypeModFunc(func(_ context.Context, o *DrinkTypeTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m drinkTypeMods) UnsetID() DrinkTypeMod {
	return DrinkTypeModFunc(func(_ context.Context, o *DrinkTypeTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkTypeMods) RandomID(f *faker.Faker) DrinkTypeMod {
	return DrinkTypeModFunc(func(_ context.Context, o *DrinkTypeTemplate) {
		o.ID = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m drinkTypeMods) Name(val string) DrinkTypeMod {
	return DrinkTypeModFunc(func(_ context.Context, o *DrinkTypeTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m drinkTypeMods) NameFunc(f func() string) DrinkTypeMod {
	return DrinkTypeModFunc(func(_ context.Context, o *DrinkTypeTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m drinkTypeMods) UnsetName() DrinkTypeMod {
	return DrinkTypeModFunc(func(_ context.Context, o *DrinkTypeTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkTypeMods) RandomName(f *faker.Faker) DrinkTypeMod {
	return DrinkTypeModFunc(func(_ context.Context, o *DrinkTypeTemplate) {
		o.Name = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m drinkTypeMods) TypicalAmountML(val int32) DrinkTypeMod {
	return DrinkTypeModFunc(func(_ context.Context, o *DrinkTypeTemplate) {
		o.TypicalAmountML = func() int32 { return val }
	})
}

// Set the Column from the function
func (m drinkTypeMods) TypicalAmountMLFunc(f func() int32) DrinkTypeMod {
	return DrinkTypeModFunc(func(_ context.Context, o *DrinkTypeTemplate) {
		o.TypicalAmountML = f
	})
}

// Clear any values for the column
func (m drinkTypeMods) UnsetTypicalAmountML() DrinkTypeMod {
	return DrinkTypeModFunc(func(_ context.Context, o *DrinkTypeTemplate) {
		o.TypicalAmountML = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkTypeMods) RandomTypicalAmountML(f *faker.Faker) DrinkTypeMod {
	return DrinkTypeModFunc(func(_ context.Context, o *DrinkTypeTemplate) {
		o.TypicalAmountML = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m drinkTypeMods) AlcoholPercentage(val float32) DrinkTypeMod {
	return DrinkTypeModFunc(func(_ context.Context, o *DrinkTypeTemplate) {
		o.AlcoholPercentage = func() float32 { return val }
	})
}

// Set the Column from the function
func (m drinkTypeMods) AlcoholPercentageFunc(f func() float32) DrinkTypeMod {
	return DrinkTypeModFunc(func(_ context.Context, o *DrinkTypeTemplate) {
		o.AlcoholPercentage = f
	})
}

// Clear any values for the column
func (m drinkTypeMods) UnsetAlcoholPercentage() DrinkTypeMod {
	return DrinkTypeModFunc(func(_ context.Context, o *DrinkTypeTemplate) {
		o.AlcoholPercentage = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkTypeMods) RandomAlcoholPercentage(f *faker.Faker) DrinkTypeMod {
	return DrinkTypeModFunc(func(_ context.Context, o *DrinkTypeTemplate) {
		o.AlcoholPercentage = func() float32 {
			return random_float32(f)
		}
	})
}

func (m drinkTypeMods) WithParentsCascading() DrinkTypeMod {
	return DrinkTypeModFunc(func(ctx context.Context, o *DrinkTypeTemplate) {
		if isDone, _ := drinkTypeWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = drinkTypeWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
