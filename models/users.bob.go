// Code generated by BobGen sqlite v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// User is an object representing the database table.
type User struct {
	ID           int32               `db:"id,pk" `
	SlackUserID  string              `db:"slack_user_id" `
	SlackTeamID  string              `db:"slack_team_id" `
	DailyLimitML sql.Null[int32]     `db:"daily_limit_ml" `
	CreatedAt    sql.Null[time.Time] `db:"created_at" `
	UpdatedAt    sql.Null[time.Time] `db:"updated_at" `

	R userR `db:"-" `
}

// UserSlice is an alias for a slice of pointers to User.
// This should almost always be used instead of []*User.
type UserSlice []*User

// Users contains methods to work with the users table
var Users = sqlite.NewTablex[*User, UserSlice, *UserSetter]("", "users")

// UsersQuery is a query on the users table
type UsersQuery = *sqlite.ViewQuery[*User, UserSlice]

// userR is where relationships are stored.
type userR struct {
	DrinkRecords DrinkRecordSlice // fk_drink_records_0
}

type userColumnNames struct {
	ID           string
	SlackUserID  string
	SlackTeamID  string
	DailyLimitML string
	CreatedAt    string
	UpdatedAt    string
}

var UserColumns = buildUserColumns("users")

type userColumns struct {
	tableAlias   string
	ID           sqlite.Expression
	SlackUserID  sqlite.Expression
	SlackTeamID  sqlite.Expression
	DailyLimitML sqlite.Expression
	CreatedAt    sqlite.Expression
	UpdatedAt    sqlite.Expression
}

func (c userColumns) Alias() string {
	return c.tableAlias
}

func (userColumns) AliasedAs(alias string) userColumns {
	return buildUserColumns(alias)
}

func buildUserColumns(alias string) userColumns {
	return userColumns{
		tableAlias:   alias,
		ID:           sqlite.Quote(alias, "id"),
		SlackUserID:  sqlite.Quote(alias, "slack_user_id"),
		SlackTeamID:  sqlite.Quote(alias, "slack_team_id"),
		DailyLimitML: sqlite.Quote(alias, "daily_limit_ml"),
		CreatedAt:    sqlite.Quote(alias, "created_at"),
		UpdatedAt:    sqlite.Quote(alias, "updated_at"),
	}
}

type userWhere[Q sqlite.Filterable] struct {
	ID           sqlite.WhereMod[Q, int32]
	SlackUserID  sqlite.WhereMod[Q, string]
	SlackTeamID  sqlite.WhereMod[Q, string]
	DailyLimitML sqlite.WhereNullMod[Q, int32]
	CreatedAt    sqlite.WhereNullMod[Q, time.Time]
	UpdatedAt    sqlite.WhereNullMod[Q, time.Time]
}

func (userWhere[Q]) AliasedAs(alias string) userWhere[Q] {
	return buildUserWhere[Q](buildUserColumns(alias))
}

func buildUserWhere[Q sqlite.Filterable](cols userColumns) userWhere[Q] {
	return userWhere[Q]{
		ID:           sqlite.Where[Q, int32](cols.ID),
		SlackUserID:  sqlite.Where[Q, string](cols.SlackUserID),
		SlackTeamID:  sqlite.Where[Q, string](cols.SlackTeamID),
		DailyLimitML: sqlite.WhereNull[Q, int32](cols.DailyLimitML),
		CreatedAt:    sqlite.WhereNull[Q, time.Time](cols.CreatedAt),
		UpdatedAt:    sqlite.WhereNull[Q, time.Time](cols.UpdatedAt),
	}
}

var UserErrors = &userErrors{
	ErrUniquePkMainUsers: &UniqueConstraintError{
		schema:  "",
		table:   "users",
		columns: []string{"id"},
		s:       "pk_main_users",
	},

	ErrUniqueSqliteAutoindexUsers1: &UniqueConstraintError{
		schema:  "",
		table:   "users",
		columns: []string{"slack_user_id"},
		s:       "sqlite_autoindex_users_1",
	},
}

type userErrors struct {
	ErrUniquePkMainUsers *UniqueConstraintError

	ErrUniqueSqliteAutoindexUsers1 *UniqueConstraintError
}

// UserSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserSetter struct {
	ID           *int32               `db:"id,pk" `
	SlackUserID  *string              `db:"slack_user_id" `
	SlackTeamID  *string              `db:"slack_team_id" `
	DailyLimitML *sql.Null[int32]     `db:"daily_limit_ml" `
	CreatedAt    *sql.Null[time.Time] `db:"created_at" `
	UpdatedAt    *sql.Null[time.Time] `db:"updated_at" `
}

func (s UserSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if s.ID != nil {
		vals = append(vals, "id")
	}

	if s.SlackUserID != nil {
		vals = append(vals, "slack_user_id")
	}

	if s.SlackTeamID != nil {
		vals = append(vals, "slack_team_id")
	}

	if s.DailyLimitML != nil {
		vals = append(vals, "daily_limit_ml")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	if s.UpdatedAt != nil {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s UserSetter) Overwrite(t *User) {
	if s.ID != nil {
		t.ID = *s.ID
	}
	if s.SlackUserID != nil {
		t.SlackUserID = *s.SlackUserID
	}
	if s.SlackTeamID != nil {
		t.SlackTeamID = *s.SlackTeamID
	}
	if s.DailyLimitML != nil {
		t.DailyLimitML = *s.DailyLimitML
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
	if s.UpdatedAt != nil {
		t.UpdatedAt = *s.UpdatedAt
	}
}

func (s *UserSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Users.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.TableRef.Columns) == 0 {
		q.TableRef.Columns = s.SetColumns()
		if len(q.TableRef.Columns) == 0 {
			q.TableRef.Columns = []string{"id"}
		}

	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 6)
		if s.ID != nil {
			vals = append(vals, sqlite.Arg(s.ID))
		}

		if s.SlackUserID != nil {
			vals = append(vals, sqlite.Arg(s.SlackUserID))
		}

		if s.SlackTeamID != nil {
			vals = append(vals, sqlite.Arg(s.SlackTeamID))
		}

		if s.DailyLimitML != nil {
			vals = append(vals, sqlite.Arg(s.DailyLimitML))
		}

		if s.CreatedAt != nil {
			vals = append(vals, sqlite.Arg(s.CreatedAt))
		}

		if s.UpdatedAt != nil {
			vals = append(vals, sqlite.Arg(s.UpdatedAt))
		}

		if len(vals) == 0 {
			vals = append(vals, sqlite.Arg(nil))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if s.SlackUserID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "slack_user_id")...),
			sqlite.Arg(s.SlackUserID),
		}})
	}

	if s.SlackTeamID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "slack_team_id")...),
			sqlite.Arg(s.SlackTeamID),
		}})
	}

	if s.DailyLimitML != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "daily_limit_ml")...),
			sqlite.Arg(s.DailyLimitML),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "created_at")...),
			sqlite.Arg(s.CreatedAt),
		}})
	}

	if s.UpdatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "updated_at")...),
			sqlite.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindUser retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUser(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*User, error) {
	if len(cols) == 0 {
		return Users.Query(
			SelectWhere.Users.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Users.Query(
		SelectWhere.Users.ID.EQ(IDPK),
		sm.Columns(Users.Columns().Only(cols...)),
	).One(ctx, exec)
}

// UserExists checks the presence of a single record by primary key
func UserExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Users.Query(
		SelectWhere.Users.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after User is retrieved from the database
func (o *User) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, UserSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the User
func (o *User) primaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

func (o *User) pkEQ() dialect.Expression {
	return sqlite.Quote("users", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the User
func (o *User) Update(ctx context.Context, exec bob.Executor, s *UserSetter) error {
	v, err := Users.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single User record with an executor
func (o *User) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Users.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the User using the executor
func (o *User) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Users.Query(
		SelectWhere.Users.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserSlice is retrieved from the database
func (o UserSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("users", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserSlice) copyMatchingRows(from ...*User) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterUpdateHooks on the slice
				_, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterDeleteHooks on the slice
				_, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Users.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type userJoins[Q dialect.Joinable] struct {
	typ          string
	DrinkRecords modAs[Q, drinkRecordColumns]
}

func (j userJoins[Q]) aliasedAs(alias string) userJoins[Q] {
	return buildUserJoins[Q](buildUserColumns(alias), j.typ)
}

func buildUserJoins[Q dialect.Joinable](cols userColumns, typ string) userJoins[Q] {
	return userJoins[Q]{
		typ: typ,
		DrinkRecords: modAs[Q, drinkRecordColumns]{
			c: DrinkRecordColumns,
			f: func(to drinkRecordColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, DrinkRecords.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
	}
}

// DrinkRecords starts a query for related objects on drink_records
func (o *User) DrinkRecords(mods ...bob.Mod[*dialect.SelectQuery]) DrinkRecordsQuery {
	return DrinkRecords.Query(append(mods,
		sm.Where(DrinkRecordColumns.UserID.EQ(sqlite.Arg(o.ID))),
	)...)
}

func (os UserSlice) DrinkRecords(mods ...bob.Mod[*dialect.SelectQuery]) DrinkRecordsQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = sqlite.ArgGroup(o.ID)
	}
	PKArgExpr := sqlite.Group(PKArgSlice...)

	return DrinkRecords.Query(append(mods,
		sm.Where(sqlite.Group(DrinkRecordColumns.UserID).OP("IN", PKArgExpr)),
	)...)
}

func (o *User) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "DrinkRecords":
		rels, ok := retrieved.(DrinkRecordSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.DrinkRecords = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	default:
		return fmt.Errorf("user has no relationship %q", name)
	}
}

type userPreloader struct{}

func buildUserPreloader() userPreloader {
	return userPreloader{}
}

type userThenLoader[Q orm.Loadable] struct {
	DrinkRecords func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildUserThenLoader[Q orm.Loadable]() userThenLoader[Q] {
	type DrinkRecordsLoadInterface interface {
		LoadDrinkRecords(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return userThenLoader[Q]{
		DrinkRecords: thenLoadBuilder[Q](
			"DrinkRecords",
			func(ctx context.Context, exec bob.Executor, retrieved DrinkRecordsLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadDrinkRecords(ctx, exec, mods...)
			},
		),
	}
}

// LoadDrinkRecords loads the user's DrinkRecords into the .R struct
func (o *User) LoadDrinkRecords(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.DrinkRecords = nil

	related, err := o.DrinkRecords(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.DrinkRecords = related
	return nil
}

// LoadDrinkRecords loads the user's DrinkRecords into the .R struct
func (os UserSlice) LoadDrinkRecords(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	drinkRecords, err := os.DrinkRecords(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.DrinkRecords = nil
	}

	for _, o := range os {
		for _, rel := range drinkRecords {
			if o.ID != rel.UserID {
				continue
			}

			rel.R.User = o

			o.R.DrinkRecords = append(o.R.DrinkRecords, rel)
		}
	}

	return nil
}

func insertUserDrinkRecords0(ctx context.Context, exec bob.Executor, drinkRecords1 []*DrinkRecordSetter, user0 *User) (DrinkRecordSlice, error) {
	for i := range drinkRecords1 {
		drinkRecords1[i].UserID = &user0.ID
	}

	ret, err := DrinkRecords.Insert(bob.ToMods(drinkRecords1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserDrinkRecords0: %w", err)
	}

	return ret, nil
}

func attachUserDrinkRecords0(ctx context.Context, exec bob.Executor, count int, drinkRecords1 DrinkRecordSlice, user0 *User) (DrinkRecordSlice, error) {
	setter := &DrinkRecordSetter{
		UserID: &user0.ID,
	}

	err := drinkRecords1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserDrinkRecords0: %w", err)
	}

	return drinkRecords1, nil
}

func (user0 *User) InsertDrinkRecords(ctx context.Context, exec bob.Executor, related ...*DrinkRecordSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	drinkRecords1, err := insertUserDrinkRecords0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.DrinkRecords = append(user0.R.DrinkRecords, drinkRecords1...)

	for _, rel := range drinkRecords1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachDrinkRecords(ctx context.Context, exec bob.Executor, related ...*DrinkRecord) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	drinkRecords1 := DrinkRecordSlice(related)

	_, err = attachUserDrinkRecords0(ctx, exec, len(related), drinkRecords1, user0)
	if err != nil {
		return err
	}

	user0.R.DrinkRecords = append(user0.R.DrinkRecords, drinkRecords1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}
