// Code generated by BobGen sqlite v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"

	models "github.com/aberyotaro/drink-tracker/models"
)

type contextKey string

var (
	// Table context

	drinkRecordCtx = newContextual[*models.DrinkRecord]("drinkRecord")
	drinkTypeCtx   = newContextual[*models.DrinkType]("drinkType")
	userCtx        = newContextual[*models.User]("user")

	// Relationship Contexts for drink_records
	drinkRecordWithParentsCascadingCtx = newContextual[bool]("drinkRecordWithParentsCascading")
	drinkRecordRelUserCtx              = newContextual[bool]("drink_records.users.fk_drink_records_0")

	// Relationship Contexts for drink_types
	drinkTypeWithParentsCascadingCtx = newContextual[bool]("drinkTypeWithParentsCascading")

	// Relationship Contexts for users
	userWithParentsCascadingCtx = newContextual[bool]("userWithParentsCascading")
	userRelDrinkRecordsCtx      = newContextual[bool]("drink_records.users.fk_drink_records_0")
)

// Contextual is a convienience wrapper around context.WithValue and context.Value
type contextual[V any] struct {
	key contextKey
}

func newContextual[V any](key string) contextual[V] {
	return contextual[V]{key: contextKey(key)}
}

func (k contextual[V]) WithValue(ctx context.Context, val V) context.Context {
	return context.WithValue(ctx, k.key, val)
}

func (k contextual[V]) Value(ctx context.Context) (V, bool) {
	v, ok := ctx.Value(k.key).(V)
	return v, ok
}
