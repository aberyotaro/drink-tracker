// Code generated by BobGen sqlite v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
)

// DrinkType is an object representing the database table.
type DrinkType struct {
	ID                int32   `db:"id,pk" `
	Name              string  `db:"name" `
	TypicalAmountML   int32   `db:"typical_amount_ml" `
	AlcoholPercentage float32 `db:"alcohol_percentage" `
}

// DrinkTypeSlice is an alias for a slice of pointers to DrinkType.
// This should almost always be used instead of []*DrinkType.
type DrinkTypeSlice []*DrinkType

// DrinkTypes contains methods to work with the drink_types table
var DrinkTypes = sqlite.NewTablex[*DrinkType, DrinkTypeSlice, *DrinkTypeSetter]("", "drink_types")

// DrinkTypesQuery is a query on the drink_types table
type DrinkTypesQuery = *sqlite.ViewQuery[*DrinkType, DrinkTypeSlice]

type drinkTypeColumnNames struct {
	ID                string
	Name              string
	TypicalAmountML   string
	AlcoholPercentage string
}

var DrinkTypeColumns = buildDrinkTypeColumns("drink_types")

type drinkTypeColumns struct {
	tableAlias        string
	ID                sqlite.Expression
	Name              sqlite.Expression
	TypicalAmountML   sqlite.Expression
	AlcoholPercentage sqlite.Expression
}

func (c drinkTypeColumns) Alias() string {
	return c.tableAlias
}

func (drinkTypeColumns) AliasedAs(alias string) drinkTypeColumns {
	return buildDrinkTypeColumns(alias)
}

func buildDrinkTypeColumns(alias string) drinkTypeColumns {
	return drinkTypeColumns{
		tableAlias:        alias,
		ID:                sqlite.Quote(alias, "id"),
		Name:              sqlite.Quote(alias, "name"),
		TypicalAmountML:   sqlite.Quote(alias, "typical_amount_ml"),
		AlcoholPercentage: sqlite.Quote(alias, "alcohol_percentage"),
	}
}

type drinkTypeWhere[Q sqlite.Filterable] struct {
	ID                sqlite.WhereMod[Q, int32]
	Name              sqlite.WhereMod[Q, string]
	TypicalAmountML   sqlite.WhereMod[Q, int32]
	AlcoholPercentage sqlite.WhereMod[Q, float32]
}

func (drinkTypeWhere[Q]) AliasedAs(alias string) drinkTypeWhere[Q] {
	return buildDrinkTypeWhere[Q](buildDrinkTypeColumns(alias))
}

func buildDrinkTypeWhere[Q sqlite.Filterable](cols drinkTypeColumns) drinkTypeWhere[Q] {
	return drinkTypeWhere[Q]{
		ID:                sqlite.Where[Q, int32](cols.ID),
		Name:              sqlite.Where[Q, string](cols.Name),
		TypicalAmountML:   sqlite.Where[Q, int32](cols.TypicalAmountML),
		AlcoholPercentage: sqlite.Where[Q, float32](cols.AlcoholPercentage),
	}
}

var DrinkTypeErrors = &drinkTypeErrors{
	ErrUniquePkMainDrinkTypes: &UniqueConstraintError{
		schema:  "",
		table:   "drink_types",
		columns: []string{"id"},
		s:       "pk_main_drink_types",
	},

	ErrUniqueSqliteAutoindexDrinkTypes1: &UniqueConstraintError{
		schema:  "",
		table:   "drink_types",
		columns: []string{"name"},
		s:       "sqlite_autoindex_drink_types_1",
	},
}

type drinkTypeErrors struct {
	ErrUniquePkMainDrinkTypes *UniqueConstraintError

	ErrUniqueSqliteAutoindexDrinkTypes1 *UniqueConstraintError
}

// DrinkTypeSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type DrinkTypeSetter struct {
	ID                *int32   `db:"id,pk" `
	Name              *string  `db:"name" `
	TypicalAmountML   *int32   `db:"typical_amount_ml" `
	AlcoholPercentage *float32 `db:"alcohol_percentage" `
}

func (s DrinkTypeSetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if s.ID != nil {
		vals = append(vals, "id")
	}

	if s.Name != nil {
		vals = append(vals, "name")
	}

	if s.TypicalAmountML != nil {
		vals = append(vals, "typical_amount_ml")
	}

	if s.AlcoholPercentage != nil {
		vals = append(vals, "alcohol_percentage")
	}

	return vals
}

func (s DrinkTypeSetter) Overwrite(t *DrinkType) {
	if s.ID != nil {
		t.ID = *s.ID
	}
	if s.Name != nil {
		t.Name = *s.Name
	}
	if s.TypicalAmountML != nil {
		t.TypicalAmountML = *s.TypicalAmountML
	}
	if s.AlcoholPercentage != nil {
		t.AlcoholPercentage = *s.AlcoholPercentage
	}
}

func (s *DrinkTypeSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return DrinkTypes.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.TableRef.Columns) == 0 {
		q.TableRef.Columns = s.SetColumns()
		if len(q.TableRef.Columns) == 0 {
			q.TableRef.Columns = []string{"id"}
		}

	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 4)
		if s.ID != nil {
			vals = append(vals, sqlite.Arg(s.ID))
		}

		if s.Name != nil {
			vals = append(vals, sqlite.Arg(s.Name))
		}

		if s.TypicalAmountML != nil {
			vals = append(vals, sqlite.Arg(s.TypicalAmountML))
		}

		if s.AlcoholPercentage != nil {
			vals = append(vals, sqlite.Arg(s.AlcoholPercentage))
		}

		if len(vals) == 0 {
			vals = append(vals, sqlite.Arg(nil))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s DrinkTypeSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s DrinkTypeSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 4)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if s.Name != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "name")...),
			sqlite.Arg(s.Name),
		}})
	}

	if s.TypicalAmountML != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "typical_amount_ml")...),
			sqlite.Arg(s.TypicalAmountML),
		}})
	}

	if s.AlcoholPercentage != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "alcohol_percentage")...),
			sqlite.Arg(s.AlcoholPercentage),
		}})
	}

	return exprs
}

// FindDrinkType retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindDrinkType(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*DrinkType, error) {
	if len(cols) == 0 {
		return DrinkTypes.Query(
			SelectWhere.DrinkTypes.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return DrinkTypes.Query(
		SelectWhere.DrinkTypes.ID.EQ(IDPK),
		sm.Columns(DrinkTypes.Columns().Only(cols...)),
	).One(ctx, exec)
}

// DrinkTypeExists checks the presence of a single record by primary key
func DrinkTypeExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return DrinkTypes.Query(
		SelectWhere.DrinkTypes.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after DrinkType is retrieved from the database
func (o *DrinkType) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = DrinkTypes.AfterSelectHooks.RunHooks(ctx, exec, DrinkTypeSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = DrinkTypes.AfterInsertHooks.RunHooks(ctx, exec, DrinkTypeSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = DrinkTypes.AfterUpdateHooks.RunHooks(ctx, exec, DrinkTypeSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = DrinkTypes.AfterDeleteHooks.RunHooks(ctx, exec, DrinkTypeSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the DrinkType
func (o *DrinkType) primaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

func (o *DrinkType) pkEQ() dialect.Expression {
	return sqlite.Quote("drink_types", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the DrinkType
func (o *DrinkType) Update(ctx context.Context, exec bob.Executor, s *DrinkTypeSetter) error {
	v, err := DrinkTypes.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single DrinkType record with an executor
func (o *DrinkType) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := DrinkTypes.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the DrinkType using the executor
func (o *DrinkType) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := DrinkTypes.Query(
		SelectWhere.DrinkTypes.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after DrinkTypeSlice is retrieved from the database
func (o DrinkTypeSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = DrinkTypes.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = DrinkTypes.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = DrinkTypes.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = DrinkTypes.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o DrinkTypeSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("drink_types", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o DrinkTypeSlice) copyMatchingRows(from ...*DrinkType) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o DrinkTypeSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return DrinkTypes.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *DrinkType:
				o.copyMatchingRows(retrieved)
			case []*DrinkType:
				o.copyMatchingRows(retrieved...)
			case DrinkTypeSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a DrinkType or a slice of DrinkType
				// then run the AfterUpdateHooks on the slice
				_, err = DrinkTypes.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o DrinkTypeSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return DrinkTypes.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *DrinkType:
				o.copyMatchingRows(retrieved)
			case []*DrinkType:
				o.copyMatchingRows(retrieved...)
			case DrinkTypeSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a DrinkType or a slice of DrinkType
				// then run the AfterDeleteHooks on the slice
				_, err = DrinkTypes.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o DrinkTypeSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals DrinkTypeSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := DrinkTypes.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o DrinkTypeSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := DrinkTypes.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o DrinkTypeSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := DrinkTypes.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}
