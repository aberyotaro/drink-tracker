// Code generated by BobGen sqlite v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	models "github.com/aberyotaro/drink-tracker/models"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type DrinkRecordMod interface {
	Apply(context.Context, *DrinkRecordTemplate)
}

type DrinkRecordModFunc func(context.Context, *DrinkRecordTemplate)

func (f DrinkRecordModFunc) Apply(ctx context.Context, n *DrinkRecordTemplate) {
	f(ctx, n)
}

type DrinkRecordModSlice []DrinkRecordMod

func (mods DrinkRecordModSlice) Apply(ctx context.Context, n *DrinkRecordTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// DrinkRecordTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type DrinkRecordTemplate struct {
	ID                func() int32
	UserID            func() int32
	DrinkType         func() string
	AmountML          func() int32
	AlcoholPercentage func() float32
	RecordedAt        func() sql.Null[time.Time]
	CreatedAt         func() sql.Null[time.Time]

	r drinkRecordR
	f *Factory
}

type drinkRecordR struct {
	User *drinkRecordRUserR
}

type drinkRecordRUserR struct {
	o *UserTemplate
}

// Apply mods to the DrinkRecordTemplate
func (o *DrinkRecordTemplate) Apply(ctx context.Context, mods ...DrinkRecordMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.DrinkRecord
// according to the relationships in the template. Nothing is inserted into the db
func (t DrinkRecordTemplate) setModelRels(o *models.DrinkRecord) {
	if t.r.User != nil {
		rel := t.r.User.o.Build()
		rel.R.DrinkRecords = append(rel.R.DrinkRecords, o)
		o.UserID = rel.ID // h2
		o.R.User = rel
	}
}

// BuildSetter returns an *models.DrinkRecordSetter
// this does nothing with the relationship templates
func (o DrinkRecordTemplate) BuildSetter() *models.DrinkRecordSetter {
	m := &models.DrinkRecordSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = &val
	}
	if o.UserID != nil {
		val := o.UserID()
		m.UserID = &val
	}
	if o.DrinkType != nil {
		val := o.DrinkType()
		m.DrinkType = &val
	}
	if o.AmountML != nil {
		val := o.AmountML()
		m.AmountML = &val
	}
	if o.AlcoholPercentage != nil {
		val := o.AlcoholPercentage()
		m.AlcoholPercentage = &val
	}
	if o.RecordedAt != nil {
		val := o.RecordedAt()
		m.RecordedAt = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.DrinkRecordSetter
// this does nothing with the relationship templates
func (o DrinkRecordTemplate) BuildManySetter(number int) []*models.DrinkRecordSetter {
	m := make([]*models.DrinkRecordSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.DrinkRecord
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use DrinkRecordTemplate.Create
func (o DrinkRecordTemplate) Build() *models.DrinkRecord {
	m := &models.DrinkRecord{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.DrinkType != nil {
		m.DrinkType = o.DrinkType()
	}
	if o.AmountML != nil {
		m.AmountML = o.AmountML()
	}
	if o.AlcoholPercentage != nil {
		m.AlcoholPercentage = o.AlcoholPercentage()
	}
	if o.RecordedAt != nil {
		m.RecordedAt = o.RecordedAt()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.DrinkRecordSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use DrinkRecordTemplate.CreateMany
func (o DrinkRecordTemplate) BuildMany(number int) models.DrinkRecordSlice {
	m := make(models.DrinkRecordSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableDrinkRecord(m *models.DrinkRecordSetter) {
	if m.UserID == nil {
		val := random_int32(nil)
		m.UserID = &val
	}
	if m.DrinkType == nil {
		val := random_string(nil)
		m.DrinkType = &val
	}
	if m.AmountML == nil {
		val := random_int32(nil)
		m.AmountML = &val
	}
	if m.AlcoholPercentage == nil {
		val := random_float32(nil)
		m.AlcoholPercentage = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.DrinkRecord
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *DrinkRecordTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.DrinkRecord) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a drinkRecord and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *DrinkRecordTemplate) Create(ctx context.Context, exec bob.Executor) (*models.DrinkRecord, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a drinkRecord and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *DrinkRecordTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.DrinkRecord {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a drinkRecord and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *DrinkRecordTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.DrinkRecord {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a drinkRecord and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *DrinkRecordTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.DrinkRecord, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableDrinkRecord(opt)

	if o.r.User == nil {
		DrinkRecordMods.WithNewUser().Apply(ctx, o)
	}

	rel0, ok := userCtx.Value(ctx)
	if !ok {
		ctx, rel0, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.UserID = &rel0.ID

	m, err := models.DrinkRecords.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = drinkRecordCtx.WithValue(ctx, m)

	m.R.User = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple drinkRecords and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o DrinkRecordTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.DrinkRecordSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple drinkRecords and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o DrinkRecordTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.DrinkRecordSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple drinkRecords and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o DrinkRecordTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.DrinkRecordSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple drinkRecords and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o DrinkRecordTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.DrinkRecordSlice, error) {
	var err error
	m := make(models.DrinkRecordSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// DrinkRecord has methods that act as mods for the DrinkRecordTemplate
var DrinkRecordMods drinkRecordMods

type drinkRecordMods struct{}

func (m drinkRecordMods) RandomizeAllColumns(f *faker.Faker) DrinkRecordMod {
	return DrinkRecordModSlice{
		DrinkRecordMods.RandomID(f),
		DrinkRecordMods.RandomUserID(f),
		DrinkRecordMods.RandomDrinkType(f),
		DrinkRecordMods.RandomAmountML(f),
		DrinkRecordMods.RandomAlcoholPercentage(f),
		DrinkRecordMods.RandomRecordedAt(f),
		DrinkRecordMods.RandomCreatedAt(f),
	}
}

// Set the model columns to this value
func (m drinkRecordMods) ID(val int32) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.ID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m drinkRecordMods) IDFunc(f func() int32) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m drinkRecordMods) UnsetID() DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkRecordMods) RandomID(f *faker.Faker) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.ID = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m drinkRecordMods) UserID(val int32) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.UserID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m drinkRecordMods) UserIDFunc(f func() int32) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m drinkRecordMods) UnsetUserID() DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkRecordMods) RandomUserID(f *faker.Faker) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.UserID = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m drinkRecordMods) DrinkType(val string) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.DrinkType = func() string { return val }
	})
}

// Set the Column from the function
func (m drinkRecordMods) DrinkTypeFunc(f func() string) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.DrinkType = f
	})
}

// Clear any values for the column
func (m drinkRecordMods) UnsetDrinkType() DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.DrinkType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkRecordMods) RandomDrinkType(f *faker.Faker) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.DrinkType = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m drinkRecordMods) AmountML(val int32) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.AmountML = func() int32 { return val }
	})
}

// Set the Column from the function
func (m drinkRecordMods) AmountMLFunc(f func() int32) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.AmountML = f
	})
}

// Clear any values for the column
func (m drinkRecordMods) UnsetAmountML() DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.AmountML = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkRecordMods) RandomAmountML(f *faker.Faker) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.AmountML = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m drinkRecordMods) AlcoholPercentage(val float32) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.AlcoholPercentage = func() float32 { return val }
	})
}

// Set the Column from the function
func (m drinkRecordMods) AlcoholPercentageFunc(f func() float32) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.AlcoholPercentage = f
	})
}

// Clear any values for the column
func (m drinkRecordMods) UnsetAlcoholPercentage() DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.AlcoholPercentage = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m drinkRecordMods) RandomAlcoholPercentage(f *faker.Faker) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.AlcoholPercentage = func() float32 {
			return random_float32(f)
		}
	})
}

// Set the model columns to this value
func (m drinkRecordMods) RecordedAt(val sql.Null[time.Time]) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.RecordedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m drinkRecordMods) RecordedAtFunc(f func() sql.Null[time.Time]) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.RecordedAt = f
	})
}

// Clear any values for the column
func (m drinkRecordMods) UnsetRecordedAt() DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.RecordedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m drinkRecordMods) RandomRecordedAt(f *faker.Faker) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.RecordedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m drinkRecordMods) RandomRecordedAtNotNull(f *faker.Faker) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.RecordedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m drinkRecordMods) CreatedAt(val sql.Null[time.Time]) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m drinkRecordMods) CreatedAtFunc(f func() sql.Null[time.Time]) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m drinkRecordMods) UnsetCreatedAt() DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m drinkRecordMods) RandomCreatedAt(f *faker.Faker) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m drinkRecordMods) RandomCreatedAtNotNull(f *faker.Faker) DrinkRecordMod {
	return DrinkRecordModFunc(func(_ context.Context, o *DrinkRecordTemplate) {
		o.CreatedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

func (m drinkRecordMods) WithParentsCascading() DrinkRecordMod {
	return DrinkRecordModFunc(func(ctx context.Context, o *DrinkRecordTemplate) {
		if isDone, _ := drinkRecordWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = drinkRecordWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewUser(ctx, UserMods.WithParentsCascading())
			m.WithUser(related).Apply(ctx, o)
		}
	})
}

func (m drinkRecordMods) WithUser(rel *UserTemplate) DrinkRecordMod {
	return DrinkRecordModFunc(func(ctx context.Context, o *DrinkRecordTemplate) {
		o.r.User = &drinkRecordRUserR{
			o: rel,
		}
	})
}

func (m drinkRecordMods) WithNewUser(mods ...UserMod) DrinkRecordMod {
	return DrinkRecordModFunc(func(ctx context.Context, o *DrinkRecordTemplate) {
		related := o.f.NewUser(ctx, mods...)

		m.WithUser(related).Apply(ctx, o)
	})
}

func (m drinkRecordMods) WithoutUser() DrinkRecordMod {
	return DrinkRecordModFunc(func(ctx context.Context, o *DrinkRecordTemplate) {
		o.r.User = nil
	})
}
