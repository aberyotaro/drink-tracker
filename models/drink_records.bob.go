// Code generated by BobGen sqlite v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// DrinkRecord is an object representing the database table.
type DrinkRecord struct {
	ID                int32               `db:"id,pk" `
	UserID            int32               `db:"user_id" `
	DrinkType         string              `db:"drink_type" `
	AmountML          int32               `db:"amount_ml" `
	AlcoholPercentage float32             `db:"alcohol_percentage" `
	RecordedAt        sql.Null[time.Time] `db:"recorded_at" `
	CreatedAt         sql.Null[time.Time] `db:"created_at" `

	R drinkRecordR `db:"-" `
}

// DrinkRecordSlice is an alias for a slice of pointers to DrinkRecord.
// This should almost always be used instead of []*DrinkRecord.
type DrinkRecordSlice []*DrinkRecord

// DrinkRecords contains methods to work with the drink_records table
var DrinkRecords = sqlite.NewTablex[*DrinkRecord, DrinkRecordSlice, *DrinkRecordSetter]("", "drink_records")

// DrinkRecordsQuery is a query on the drink_records table
type DrinkRecordsQuery = *sqlite.ViewQuery[*DrinkRecord, DrinkRecordSlice]

// drinkRecordR is where relationships are stored.
type drinkRecordR struct {
	User *User // fk_drink_records_0
}

type drinkRecordColumnNames struct {
	ID                string
	UserID            string
	DrinkType         string
	AmountML          string
	AlcoholPercentage string
	RecordedAt        string
	CreatedAt         string
}

var DrinkRecordColumns = buildDrinkRecordColumns("drink_records")

type drinkRecordColumns struct {
	tableAlias        string
	ID                sqlite.Expression
	UserID            sqlite.Expression
	DrinkType         sqlite.Expression
	AmountML          sqlite.Expression
	AlcoholPercentage sqlite.Expression
	RecordedAt        sqlite.Expression
	CreatedAt         sqlite.Expression
}

func (c drinkRecordColumns) Alias() string {
	return c.tableAlias
}

func (drinkRecordColumns) AliasedAs(alias string) drinkRecordColumns {
	return buildDrinkRecordColumns(alias)
}

func buildDrinkRecordColumns(alias string) drinkRecordColumns {
	return drinkRecordColumns{
		tableAlias:        alias,
		ID:                sqlite.Quote(alias, "id"),
		UserID:            sqlite.Quote(alias, "user_id"),
		DrinkType:         sqlite.Quote(alias, "drink_type"),
		AmountML:          sqlite.Quote(alias, "amount_ml"),
		AlcoholPercentage: sqlite.Quote(alias, "alcohol_percentage"),
		RecordedAt:        sqlite.Quote(alias, "recorded_at"),
		CreatedAt:         sqlite.Quote(alias, "created_at"),
	}
}

type drinkRecordWhere[Q sqlite.Filterable] struct {
	ID                sqlite.WhereMod[Q, int32]
	UserID            sqlite.WhereMod[Q, int32]
	DrinkType         sqlite.WhereMod[Q, string]
	AmountML          sqlite.WhereMod[Q, int32]
	AlcoholPercentage sqlite.WhereMod[Q, float32]
	RecordedAt        sqlite.WhereNullMod[Q, time.Time]
	CreatedAt         sqlite.WhereNullMod[Q, time.Time]
}

func (drinkRecordWhere[Q]) AliasedAs(alias string) drinkRecordWhere[Q] {
	return buildDrinkRecordWhere[Q](buildDrinkRecordColumns(alias))
}

func buildDrinkRecordWhere[Q sqlite.Filterable](cols drinkRecordColumns) drinkRecordWhere[Q] {
	return drinkRecordWhere[Q]{
		ID:                sqlite.Where[Q, int32](cols.ID),
		UserID:            sqlite.Where[Q, int32](cols.UserID),
		DrinkType:         sqlite.Where[Q, string](cols.DrinkType),
		AmountML:          sqlite.Where[Q, int32](cols.AmountML),
		AlcoholPercentage: sqlite.Where[Q, float32](cols.AlcoholPercentage),
		RecordedAt:        sqlite.WhereNull[Q, time.Time](cols.RecordedAt),
		CreatedAt:         sqlite.WhereNull[Q, time.Time](cols.CreatedAt),
	}
}

var DrinkRecordErrors = &drinkRecordErrors{
	ErrUniquePkMainDrinkRecords: &UniqueConstraintError{
		schema:  "",
		table:   "drink_records",
		columns: []string{"id"},
		s:       "pk_main_drink_records",
	},
}

type drinkRecordErrors struct {
	ErrUniquePkMainDrinkRecords *UniqueConstraintError
}

// DrinkRecordSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type DrinkRecordSetter struct {
	ID                *int32               `db:"id,pk" `
	UserID            *int32               `db:"user_id" `
	DrinkType         *string              `db:"drink_type" `
	AmountML          *int32               `db:"amount_ml" `
	AlcoholPercentage *float32             `db:"alcohol_percentage" `
	RecordedAt        *sql.Null[time.Time] `db:"recorded_at" `
	CreatedAt         *sql.Null[time.Time] `db:"created_at" `
}

func (s DrinkRecordSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if s.ID != nil {
		vals = append(vals, "id")
	}

	if s.UserID != nil {
		vals = append(vals, "user_id")
	}

	if s.DrinkType != nil {
		vals = append(vals, "drink_type")
	}

	if s.AmountML != nil {
		vals = append(vals, "amount_ml")
	}

	if s.AlcoholPercentage != nil {
		vals = append(vals, "alcohol_percentage")
	}

	if s.RecordedAt != nil {
		vals = append(vals, "recorded_at")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	return vals
}

func (s DrinkRecordSetter) Overwrite(t *DrinkRecord) {
	if s.ID != nil {
		t.ID = *s.ID
	}
	if s.UserID != nil {
		t.UserID = *s.UserID
	}
	if s.DrinkType != nil {
		t.DrinkType = *s.DrinkType
	}
	if s.AmountML != nil {
		t.AmountML = *s.AmountML
	}
	if s.AlcoholPercentage != nil {
		t.AlcoholPercentage = *s.AlcoholPercentage
	}
	if s.RecordedAt != nil {
		t.RecordedAt = *s.RecordedAt
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
}

func (s *DrinkRecordSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return DrinkRecords.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.TableRef.Columns) == 0 {
		q.TableRef.Columns = s.SetColumns()
		if len(q.TableRef.Columns) == 0 {
			q.TableRef.Columns = []string{"id"}
		}

	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 7)
		if s.ID != nil {
			vals = append(vals, sqlite.Arg(s.ID))
		}

		if s.UserID != nil {
			vals = append(vals, sqlite.Arg(s.UserID))
		}

		if s.DrinkType != nil {
			vals = append(vals, sqlite.Arg(s.DrinkType))
		}

		if s.AmountML != nil {
			vals = append(vals, sqlite.Arg(s.AmountML))
		}

		if s.AlcoholPercentage != nil {
			vals = append(vals, sqlite.Arg(s.AlcoholPercentage))
		}

		if s.RecordedAt != nil {
			vals = append(vals, sqlite.Arg(s.RecordedAt))
		}

		if s.CreatedAt != nil {
			vals = append(vals, sqlite.Arg(s.CreatedAt))
		}

		if len(vals) == 0 {
			vals = append(vals, sqlite.Arg(nil))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s DrinkRecordSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s DrinkRecordSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if s.UserID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "user_id")...),
			sqlite.Arg(s.UserID),
		}})
	}

	if s.DrinkType != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "drink_type")...),
			sqlite.Arg(s.DrinkType),
		}})
	}

	if s.AmountML != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "amount_ml")...),
			sqlite.Arg(s.AmountML),
		}})
	}

	if s.AlcoholPercentage != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "alcohol_percentage")...),
			sqlite.Arg(s.AlcoholPercentage),
		}})
	}

	if s.RecordedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "recorded_at")...),
			sqlite.Arg(s.RecordedAt),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "created_at")...),
			sqlite.Arg(s.CreatedAt),
		}})
	}

	return exprs
}

// FindDrinkRecord retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindDrinkRecord(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*DrinkRecord, error) {
	if len(cols) == 0 {
		return DrinkRecords.Query(
			SelectWhere.DrinkRecords.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return DrinkRecords.Query(
		SelectWhere.DrinkRecords.ID.EQ(IDPK),
		sm.Columns(DrinkRecords.Columns().Only(cols...)),
	).One(ctx, exec)
}

// DrinkRecordExists checks the presence of a single record by primary key
func DrinkRecordExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return DrinkRecords.Query(
		SelectWhere.DrinkRecords.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after DrinkRecord is retrieved from the database
func (o *DrinkRecord) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = DrinkRecords.AfterSelectHooks.RunHooks(ctx, exec, DrinkRecordSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = DrinkRecords.AfterInsertHooks.RunHooks(ctx, exec, DrinkRecordSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = DrinkRecords.AfterUpdateHooks.RunHooks(ctx, exec, DrinkRecordSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = DrinkRecords.AfterDeleteHooks.RunHooks(ctx, exec, DrinkRecordSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the DrinkRecord
func (o *DrinkRecord) primaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

func (o *DrinkRecord) pkEQ() dialect.Expression {
	return sqlite.Quote("drink_records", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the DrinkRecord
func (o *DrinkRecord) Update(ctx context.Context, exec bob.Executor, s *DrinkRecordSetter) error {
	v, err := DrinkRecords.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single DrinkRecord record with an executor
func (o *DrinkRecord) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := DrinkRecords.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the DrinkRecord using the executor
func (o *DrinkRecord) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := DrinkRecords.Query(
		SelectWhere.DrinkRecords.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after DrinkRecordSlice is retrieved from the database
func (o DrinkRecordSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = DrinkRecords.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = DrinkRecords.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = DrinkRecords.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = DrinkRecords.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o DrinkRecordSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("drink_records", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o DrinkRecordSlice) copyMatchingRows(from ...*DrinkRecord) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o DrinkRecordSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return DrinkRecords.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *DrinkRecord:
				o.copyMatchingRows(retrieved)
			case []*DrinkRecord:
				o.copyMatchingRows(retrieved...)
			case DrinkRecordSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a DrinkRecord or a slice of DrinkRecord
				// then run the AfterUpdateHooks on the slice
				_, err = DrinkRecords.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o DrinkRecordSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return DrinkRecords.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *DrinkRecord:
				o.copyMatchingRows(retrieved)
			case []*DrinkRecord:
				o.copyMatchingRows(retrieved...)
			case DrinkRecordSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a DrinkRecord or a slice of DrinkRecord
				// then run the AfterDeleteHooks on the slice
				_, err = DrinkRecords.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o DrinkRecordSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals DrinkRecordSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := DrinkRecords.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o DrinkRecordSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := DrinkRecords.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o DrinkRecordSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := DrinkRecords.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type drinkRecordJoins[Q dialect.Joinable] struct {
	typ  string
	User modAs[Q, userColumns]
}

func (j drinkRecordJoins[Q]) aliasedAs(alias string) drinkRecordJoins[Q] {
	return buildDrinkRecordJoins[Q](buildDrinkRecordColumns(alias), j.typ)
}

func buildDrinkRecordJoins[Q dialect.Joinable](cols drinkRecordColumns, typ string) drinkRecordJoins[Q] {
	return drinkRecordJoins[Q]{
		typ: typ,
		User: modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(cols.UserID),
					))
				}

				return mods
			},
		},
	}
}

// User starts a query for related objects on users
func (o *DrinkRecord) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(sqlite.Arg(o.UserID))),
	)...)
}

func (os DrinkRecordSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = sqlite.ArgGroup(o.UserID)
	}
	PKArgExpr := sqlite.Group(PKArgSlice...)

	return Users.Query(append(mods,
		sm.Where(sqlite.Group(UserColumns.ID).OP("IN", PKArgExpr)),
	)...)
}

func (o *DrinkRecord) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("drinkRecord cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.DrinkRecords = DrinkRecordSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("drinkRecord has no relationship %q", name)
	}
}

type drinkRecordPreloader struct {
	User func(...sqlite.PreloadOption) sqlite.Preloader
}

func buildDrinkRecordPreloader() drinkRecordPreloader {
	return drinkRecordPreloader{
		User: func(opts ...sqlite.PreloadOption) sqlite.Preloader {
			return sqlite.Preload[*User, UserSlice](orm.Relationship{
				Name: "User",
				Sides: []orm.RelSide{
					{
						From: TableNames.DrinkRecords,
						To:   TableNames.Users,
						FromColumns: []string{
							ColumnNames.DrinkRecords.UserID,
						},
						ToColumns: []string{
							ColumnNames.Users.ID,
						},
					},
				},
			}, Users.Columns().Names(), opts...)
		},
	}
}

type drinkRecordThenLoader[Q orm.Loadable] struct {
	User func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildDrinkRecordThenLoader[Q orm.Loadable]() drinkRecordThenLoader[Q] {
	type UserLoadInterface interface {
		LoadUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return drinkRecordThenLoader[Q]{
		User: thenLoadBuilder[Q](
			"User",
			func(ctx context.Context, exec bob.Executor, retrieved UserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadUser(ctx, exec, mods...)
			},
		),
	}
}

// LoadUser loads the drinkRecord's User into the .R struct
func (o *DrinkRecord) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.DrinkRecords = DrinkRecordSlice{o}

	o.R.User = related
	return nil
}

// LoadUser loads the drinkRecord's User into the .R struct
func (os DrinkRecordSlice) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.DrinkRecords = append(rel.R.DrinkRecords, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachDrinkRecordUser0(ctx context.Context, exec bob.Executor, count int, drinkRecord0 *DrinkRecord, user1 *User) (*DrinkRecord, error) {
	setter := &DrinkRecordSetter{
		UserID: &user1.ID,
	}

	err := drinkRecord0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachDrinkRecordUser0: %w", err)
	}

	return drinkRecord0, nil
}

func (drinkRecord0 *DrinkRecord) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachDrinkRecordUser0(ctx, exec, 1, drinkRecord0, user1)
	if err != nil {
		return err
	}

	drinkRecord0.R.User = user1

	user1.R.DrinkRecords = append(user1.R.DrinkRecords, drinkRecord0)

	return nil
}

func (drinkRecord0 *DrinkRecord) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachDrinkRecordUser0(ctx, exec, 1, drinkRecord0, user1)
	if err != nil {
		return err
	}

	drinkRecord0.R.User = user1

	user1.R.DrinkRecords = append(user1.R.DrinkRecords, drinkRecord0)

	return nil
}
